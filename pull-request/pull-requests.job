#!/home/mgorny/bin/run-cronjob.sh
# vim:ft=sh

set -e -x

. "${VIRTUAL_ENV}"/bin/activate

sync=${SYNC_DIR}/gentoo
mirror=${MIRROR_DIR}/gentoo
gentooci=${GENTOO_CI_GIT}
pull=${PULL_REQUEST_DIR}

cd "${sync}"
git fetch -f "${PULL_REQUEST_REPO}" 'refs/pull/*/head:refs/pull/*'

mkdir -p "${pull}"
no=0
prid=
set +x
while read mtime iid; do
	hash=$(git rev-parse "refs/pull/${iid}")

	if [[ ! -f ${pull}/${iid} || $(<"${pull}/${iid}") != ${hash} ]]; then
		if [[ ${no} -eq 0 ]]; then
			if ! "${SCRIPT_DIR}"/pull-request/want-pull-request-ci.py "${iid}"; then
				echo "${iid}: skipped" >&2
				echo "${hash}" > "${pull}/${iid}"
				touch "${pull}/${iid}.done"
				"${SCRIPT_DIR}"/pull-request/set-pull-request-status.py "${hash}" success \
					"QA checks skipped."
				continue
			fi

			prid=${iid}
		else
			echo "${iid}: pending" >&2
			if [[ ${no} -le 10 ]]; then
				set -x
				"${SCRIPT_DIR}"/pull-request/set-pull-request-status.py "${hash}" pending \
					"QA checks queued. Expected by $(date -u --date="+$(( no*20 + 10 ))min" "+%H:%MZ")" &
				set +x
			fi
		fi

		: $(( no++ ))
	elif [[ ! -f ${pull}/${iid}.done ]]; then
		set -x
		"${SCRIPT_DIR}"/pull-request/set-pull-request-status.py "${hash}" error \
			"QA checks crashed. Please rebase and check profile changes for syntax errors."
		sendmail "${CRONJOB_ADMIN_MAIL}" <<-EOF
			Subject: Pull request crash: ${iid}
			To: <${CRONJOB_ADMIN_MAIL}>
			Content-Type: text/plain; charset=utf8

			It seems that pull request check for ${iid} crashed [1].

			[1]:${PULL_REQUEST_REPO}/pull/${iid}
		EOF
		# avoid reporting indefinitely ;-)
		touch "${pull}/${iid}.done"
		set +x
	fi
done < <(find .git/refs/pull -type f -printf '%TY-%TM-%TdT%TT %P\n' | sort -k1)

if [[ -n ${prid} ]]; then
	ref=refs/pull/${prid}
	hash=$(git rev-parse "${ref}")

	echo "${prid}: in progress" >&2
	set -x
	cd "${pull}"
	rm -f "${prid}.done"
	echo "${hash}" > "${prid}"
	"${SCRIPT_DIR}"/pull-request/set-pull-request-status.py "${hash}" pending \
		"QA checks in progress. Results by $(date -u --date="+10min" "+%H:%MZ")" &
	rm -rf tmp gentoo-ci

	git clone -s --no-checkout "${mirror}" tmp
	cd tmp
	git fetch "${sync}" "${ref}:${ref}"
	# start on top of last common commit, like fast-forward would do
	git branch "pull-${prid}" "$(git merge-base "${ref}" master)"
	git checkout -q "pull-${prid}"
	# copy existing md5-cache (TODO: try to find previous merge commit)
	rsync -rlpt --delete "${mirror}"/metadata/{dtd,glsa,md5-cache,news,xml-schema} metadata

	# update for pre-merge cache
	export PORTAGE_CONFIGROOT="${pull}"
	time pmaint regen --use-local-desc --pkg-desc-index -t 16 gentoo || :
	git add -A -f
	git diff --cached --quiet --exit-code || git commit --quiet -m "Pre-merge cache init"
	git tag pre-merge

	# merge the PR on top of cache
	git merge --quiet -m "Merge PR ${prid}" "${ref}"

	# update cache post-merge
	time pmaint regen --use-local-desc --pkg-desc-index -t 16 gentoo || :
	git add -A -f
	git diff --cached --quiet --exit-code || git commit --quiet -m "Post-merge cache update"

	# push to mirror
	(
		git push -f "${mirror}" "pull-${prid}"
		cd "${mirror}"
		git fetch --all
		git push -f origin "pull-${prid}"
	) &

	cd ..
	git clone -s "${gentooci}" gentoo-ci
	cd gentoo-ci
	git checkout -b "pull-${prid}"
	make -f "${SCRIPT_DIR}"/shared-ci/gentoo-ci.make clean
	time timeout 20m make -f "${SCRIPT_DIR}"/shared-ci/gentoo-ci.make -j16 \
		repo="${pull}/tmp" HOME="${pull}/gentoo-ci"
	ts=$(cd "${pull}"/tmp; git log --pretty='%ct' -1)
	"${PKGCHECK_RESULT_PARSER_GIT}"/pkgcheck2borked.py -w -e \
		-o borked.list *.xml
	git add *.xml
	git diff --cached --quiet --exit-code || git commit -a -m "PR ${prid} @ $(date -u --date="@${ts}" "+%Y-%m-%d %H:%M:%S UTC")"
	pr_hash=$(git rev-parse --short HEAD)
	git push -f origin "pull-${prid}"

	cd "${gentooci}"
	git push -f origin "pull-${prid}"

	# if we have any breakages...
	if [[ -s ${pull}/gentoo-ci/borked.list ]]; then
		pkgs=()
		while read l; do
			[[ ${l} ]] && pkgs+=( "${l}" )
		done <"${pull}"/gentoo-ci/borked.list

		# go back to pre-merge state and see if they were there
		cd "${pull}"/tmp
		git checkout -q pre-merge

		if [[ ${#pkgs[@]} -le 30 ]]; then
			outfiles=()

			if [[ ${#pkgs[@]} -gt 0 ]]; then
				pkgcheck scan -r gentoo --reporter XmlReporter "${pkgs[@]}" \
					${PKGCHECK_OPTIONS} \
					> .pre-merge.xml
				outfiles+=( .pre-merge.xml )
			fi

			pkgcheck scan -r gentoo --reporter XmlReporter "*/*" \
				${PKGCHECK_OPTIONS} \
				-C repo-category \
				> .pre-merge-g.xml
			outfiles+=( .pre-merge-g.xml )

			"${PKGCHECK_RESULT_PARSER_GIT}"/pkgcheck2borked.py \
				-w -e -o .pre-merge.borked "${outfiles[@]}"
		else
			echo ETOOMANY > .pre-merge.borked
		fi
	fi

	"${SCRIPT_DIR}"/pull-request/report-pull-request.py "${prid}" "${pr_hash}" \
		"${pull}"/gentoo-ci/borked.list .pre-merge.borked "${hash}"

	touch "${pull}/${prid}.done"

	# wait for mirror pushing job
	wait

	rm -rf "${pull}"/tmp "${pull}"/gentoo-ci
fi
